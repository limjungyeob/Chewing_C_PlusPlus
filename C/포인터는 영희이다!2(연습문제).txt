문제 1
int arr[3][3]; 과 같은 배열은 내부적으로 어떻게 처리되는지 생각해보세요 (난이도 : 中)

2차원 배열은 연속된 메모리 블록으로 저장되며, 행과 열로 나뉘어 있지만 메모리 상에서는 1차원적으로 저장된다.
배열의 요소는 메모리상에서 행 우선(row-major order) 방식으로 저장된다. 
즉, 첫 번째 행의 모든 원소 → 두 번째 행의 모든 원소 → 세 번째 행의 모든 원소 순서로 저장된다.
int arr[3][3] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};는 
주소	값
0x00	1
0x04	2
0x08	3
0x0C	4
0x10	5
0x14	6
0x18	7
0x1C	8
0x20	9
로 저장된다.
배열 arr[3][3]의 첫 번째 행은 arr[0]으로 표현된다.
arr[i][j]는 내부적으로 다음과 같이 처리된다:
*(arr + i * 3 + j)
i: 행의 인덱스
j: 열의 인덱스
3: 한 행의 원소 개수
예를 들어 arr[1][2]는 *(arr + 1 * 3 + 2)로 계산되어 메모리 주소 0x14를 가리킨다.

이중 포인터를 사용하여 2차원 배열 동적 할당.
 int rows = 3, cols = 3;

    // 이중 포인터를 사용해 2차원 배열 동적 할당
    int** matrix = new int*[rows];
    for (int i = 0; i < rows; i++) {
        matrix[i] = new int[cols];  // 각 행에 대해 메모리 할당
    }

    // 값 초기화
    int value = 1;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = value++;
        }
    }
    // 값 출력
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // 메모리 해제
    for (int i = 0; i < rows; i++) {
        delete[] matrix[i];  // 각 행의 메모리 해제
    }
    delete[] matrix;  // 포인터 배열 해제

    return 0;
    
문제 2
int* arr[3]; 과 같은 배열이 가지는 의미는 무엇일까요? (난이도 : 中)

int* arr[3];는 포인터 배열이다.
arr는 포인터를 저장하는 배열로, 크기가 3이다.
즉, arr[0], arr[1], arr[2] 각각은 int를 가리키는 포인터이며, 각 포인터가 서로 다른 메모리 위치를 가리킬 수 있다.