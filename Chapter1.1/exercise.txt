참조자 문제 1:
1. 함수를 사용함에 있어서의 참조자.
1.1 지역 변수의 참조자를 리턴

int& fuction() { 
     int  a = 2;
     return a;
}

int main() {
    int b = fuction();
    b = 3;
    return 0;
}
결과 : Warning reference to local variable 'a' returned
지역 변수 a는 함수의 리턴과 함께 소멸되기 때문에, b에서 계속 참조할 수 가 없다. (Dangling refererce)

1.2 외부 변수의 참조자를 리턴
int& fuction(int& a) {
    a = 5;
    return a;
}

int main() { 
    int b = 2;
    int c = function(b);
    
    std::cout << "c= " << c << std::endl; // c=5
    return 0;
}
여기 a는 main의 b를 참조하고 있으며, 함수가 반환되어도 b는 살아있기 때문에, 결국 c에는 b의 값을 대입된다.
이와 같은 참조자 리턴의 장점은 아주 큰 구조체가 있을 때, 구조체 변수 자체를 리턴하면 그 값을 모두 복사하느라 오랜 시간이 
걸리지만, 참조자로 리턴하면 빠르게 전달을 끝낼 수 있다.
이는 포인터를 사용할 때의 장점과 동일하다.

1.3 참조자가 아닌 값을 리턴하는 함수를 참조자로 받기.
int function() { 
    int a = 5;
    return a;
}

int main() {
    int& c = function();	//컴파일 에러
    const int& c = function();	//상수 참조자로 받으면 컴파일 가능
    return 0;
}
결과 : error : cannot bind non-const value reference of type 'int&' tot an value of type 'int'
a는 fuction() 함수가 끝나면 소멸되기 때문에, 컴파일 에러가 발생하지만, const  reference로 받으면 리턴값의 생명이 연장되어
정상적인 실행이 가능하고, 해당 참조자가 소멸할 때 까지 유효하다.

2. 어떤 경우에 포인터를 쓰는 것 보다 참조자를 쓰는 것이 적합할까?
(포인터를 사용하는 경우)
매개 변수에 null 포인터를 넘겨주는 것 or 리턴값으로 null 포인터를 반환하는 것이 허용될 경우, 포인터를 사용해야 한다.
참조나는 선언과 동시에 초기화 되어야해서 null이 허용되지 않기 때문이다.

(참조자를 쓰는 것이 더 좋은 경우)
포인터를 이용하다가 엉뚱한 메모리를 수정하는 불상사를 미연에 방지할 수 있다.
// 이런 경우에는 반드시 참조자를 쓰는 것이 좋습니다.
 
vector<int> v(10);    // 크기 10의 int 벡터를 만듭니다.
 
v[5] = 10;            // 이 대입 연산의 대상은 operator[]의
                    // 반환값입니다.
 
// 만일 operator[]가 포인터를 반환하면,
// 다음과 같이 조금 어색한(포인터의 벡터처럼 보이는)
// 형태가 되어야 할 것입니다.
 
*v[5] = 10;

3. 참조자가 반드시 메모리상에 존재해야하는 경우와 메모리상에 존재할 필요가 없는 경우는?
#include <iostream>

int func1(int &a){ 
    a++;
    return a; 
}
  
int &func2(int &a){ 
    a++;
    return a;
}
  
int main(){
    int x = 10;
    int y = 20;
    int& j = x;
    
    std::cout << fn1(x) << std::endl;
    std::cout << fn2(y) << std::endl;
}

메모리에 존재하는 경우는, 참조자와 참조자가 참조하는 변수가 같은 함수 내에 있는 경우라고 볼 수 있다.
main 함수의 셋째줄과 같은 경우이다.

메모리에 존재하지 않는 경우란, 해당 함수가 끝나고 runtime이 다음 영역으로 갔을때이다.
func1의 반환값은 참조자가 아니기 때문에 반환과 동시에 참조자 a는 메모리 상에서 존재하지 않는다.
하지만 func2의 경우 반환ㄱ밧이 참조자이기 때문에 a는 사라졌을지 언정 f2(x)가 x의 참조자로서 남아있다.